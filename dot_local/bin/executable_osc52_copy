#!/usr/bin/env fish

set -l pty
if set -q TMUX
    set pty (tmux display -p '#{pane_tty}')
else
    set pty (tty)
end

# TODO: Piping doesn't work when not in tmux due to the below
# The fix would be just to print the escape sequence to stdout instead of pty
if test "$pty" = "not a tty"
    echo "Error: not a tty" >&2
    exit 1
end

set -l piped_content
if not isatty stdin
    while read --line --local line
        if test -z "$piped_content"
            set piped_content $line
        else
            set piped_content "$piped_content\n$line"
        end
    end
end

set -l contents "$argv"
if test -n "$piped_content"
    set contents "$piped_content$contents"
end
set -l osc_prefix
if set -q TMUX
    if set -q SSH_CONNECTION
        set osc_prefix "\x1bPtmux;\x1b\x1bPtmux;\x1b\x1b\x1b\x1b"
    else
        set osc_prefix "\x1bPtmux;\x1b\x1b"
    end
else
    set osc_prefix "\x1b"
end
set -l osc_suffix
if set -q TMUX
    if set -q SSH_CONNECTION
        set osc_suffix '\a\x1b\x1b\\\\\x1b\\'
    else
        set osc_suffix '\a\x1b\\'
    end
else
    set osc_suffix '\x1b\\'
end
set -l serialized_contents (printf $contents | base64 | tr -d '\r\n')
echo -ne "$osc_prefix]52;c;$serialized_contents$osc_suffix" >$pty
